import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

IN_CSV  = "historic_demand_weather_enriched.csv"
df = pd.read_csv(IN_CSV, parse_dates=["timestamp"]).set_index("timestamp").sort_index()

# ------------------------------------------------------------------
# 2) CORE DEMAND PREâ€‘PROCESSING 
# ------------------------------------------------------------------
df["demand"] = df["nd"] 
df = df.resample("15T").interpolate("linear")

# ------------------------------------------------------------------
# 3) TIME & SEASONAL FEATURES
# ------------------------------------------------------------------
df["hour"]      = df.index.hour
df["quarter"]   = df.index.minute // 15
df["dayofweek"] = df.index.dayofweek
df["month"]     = df.index.month

df["sin_time"]  = np.sin(2*np.pi*((df["hour"]*4 + df["quarter"])/96))
df["cos_time"]  = np.cos(2*np.pi*((df["hour"]*4 + df["quarter"])/96))

frac_year       = (df.index.dayofyear - 1 + (df["hour"]*60 + df.index.minute)/1440)/365
df["sin_doy"]   = np.sin(2*np.pi*frac_year)
df["cos_doy"]   = np.cos(2*np.pi*frac_year)

df["fourier_weekly_sin"]  = np.sin(2*np.pi*df.index.dayofweek / 7)
df["fourier_weekly_cos"]  = np.cos(2*np.pi*df.index.dayofweek / 7)
df["fourier_yearly_sin"]  = np.sin(2*np.pi*df.index.dayofyear / 365)
df["fourier_yearly_cos"]  = np.cos(2*np.pi*df.index.dayofyear / 365)

# ------------------------------------------------------------------
# 4) DEMAND LAG  /  ROLLING /  TREND FEATURES
# ------------------------------------------------------------------
for d in (2, 3, 5):
    df[f"lag_{d}_day"]     = df["demand"].shift(96*d)
    df[f"ewd_lag_{d}_day"] = df["england_wales_demand"].shift(96*d)

for step in (4, 12, 24):
    df[f"demand_lag_{step}_step"] = df["demand"].shift(step)

df["rolling_mean_1d"]   = df["demand"].rolling(96).mean()
df["rolling_std_1d"]    = df["demand"].rolling(96).std()
df["rolling_mean_3d"]   = df["demand"].rolling(96*3).mean()
df["rolling_max_1d"]    = df["demand"].rolling(96).max()
df["rolling_min_1d"]    = df["demand"].rolling(96).min()
df["ewma_1d"]           = df["demand"].ewm(span=96).mean()
df["rolling_skew_1d"]   = df["demand"].rolling(96).skew()
df["trend_3h"]          = df["demand"].diff(12)
df["trend_6h"]          = df["demand"].diff(24)

df["lag_sum_2_3"]       = df["lag_2_day"] + df["lag_3_day"]
df["lag_ratio_2_5"]     = df["lag_2_day"] / (df["lag_5_day"] + 1e-6)
df["demand_x_hour"]     = df["demand"] * df["hour"]
df["demand_x_weekend"]  = df["demand"] * df["dayofweek"].isin([5,6]).astype(int)

# ------------------------------------------------------------------
# 5) WEEKEND / PEAK / DEMAND FLAGS
# ------------------------------------------------------------------
df["is_weekend"]         = df["dayofweek"].isin([5,6]).astype(int)
df["holiday_or_weekend"] = ((df["is_holiday"]==1) | (df["is_weekend"]==1)).astype(int)
df["is_peak_hour"]       = df["hour"].isin([17,18,19]).astype(int)
threshold                = df["demand"].quantile(0.95)
df["high_demand_flag"]   = (df["demand"] > threshold).astype(int)
df["spike_flag"]         = (df["demand"].diff().abs() > 300).astype(int)

# -----------------------------------------ddwd-------------------------
# 6) HOURâ€‘BUCKET ONEâ€‘HOT
# ------------------------------------------------------------------
bucket = lambda h: ("night" if h < 6 else
                    "morning" if h < 12 else
                    "afternoon" if h < 18 else
                    "evening")
df["hour_bucket"] = df.index.hour.map(bucket)
df = pd.get_dummies(df, columns=["hour_bucket"], drop_first=True)

# ------------------------------------------------------------------
# 7) WEATHER LAG FEATURES  (lagâ€‘2 / lagâ€‘3 / lagâ€‘5 days)
# ------------------------------------------------------------------
weather_vars = [
    "temperature_2m", "relative_humidity_2m", "dew_point_2m",
    "wind_speed_10m", "cloud_cover", "shortwave_radiation", "surface_pressure"
]

for var in weather_vars:
    for d in (2, 3, 5):
        df[f"{var}_lag_{d}_day"] = df[var].shift(96 * d)


# ------------------------------------------------------------------
# 8) SAMEâ€‘TIME YESTERDAY  & DROP NAs
# ------------------------------------------------------------------
df["demand_yday_same_time"] = df["demand"].shift(96)
df = df.dropna()
print(" Feature matrix shape:", df.shape)

# ------------------------------------------------------------------
# 9) TRAIN / TEST SPLIT
# ------------------------------------------------------------------
df["target"] = df["england_wales_demand"]
X = df.drop(columns=[
    "england_wales_demand", "target",
    "settlement_date", "settlement_period", "nd"
], errors="ignore")
y = df["target"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.20, shuffle=False
)

# ------------------------------------------------------------------
# 10) RANDOM FOREST
# ------------------------------------------------------------------
from lightgbm import LGBMRegressor

# ------------------------------------------------------------------
# 10) LIGHTGBM MODEL
# ------------------------------------------------------------------
lgbm = LGBMRegressor(
    n_estimators=200,
    max_depth=15,
    learning_rate=0.05,
    random_state=42,
    n_jobs=-1
)
import re

# Clean column names in X_train and X_test
def sanitize_columns(df):
    df.columns = [re.sub(r'[\"\[\]\{\}\:]', '_', col) for col in df.columns]
    return df

X_train = sanitize_columns(X_train)
X_test = sanitize_columns(X_test)

lgbm.fit(X_train, y_train)

# ------------------------------------------------------------------
# 11) METRICS
# ------------------------------------------------------------------
y_pred = lgbm.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)

def safe_mape(y_true, y_pred, eps=1e-5):
    mask = y_true > eps
    return np.mean(np.abs((y_true[mask] - y_pred[mask]) / y_true[mask])) * 100

mape = safe_mape(y_test, y_pred)
naive = y_test.shift(1).dropna()
mase  = mae / np.mean(np.abs(naive.values - y_test.iloc[1:].values))

print(f" MAPE:  {mape:.2f} %")
print(f" MASE:  {mase:.3f}")


import random
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error

# ---------------------------------------
# Pick a random valid day from test set
# ---------------------------------------
test_indices = y_test.index
valid_start_indices = [ts for ts in test_indices if ts + pd.Timedelta(minutes=15*95) in test_indices]

if not valid_start_indices:
    print(" No valid 96-block days in test set.")
    exit()

random_start = random.choice(valid_start_indices)
start_loc = y_test.index.get_loc(random_start)
end_loc   = start_loc + 96

y_true_day = y_test.values[start_loc:end_loc]
y_pred_day = y_pred[start_loc:end_loc]

# ---------------------------------------
# Calculate metrics
# ---------------------------------------
mae_day = mean_absolute_error(y_true_day, y_pred_day)

def safe_mape(y_true, y_pred, eps=1e-5):
    mask = y_true > eps
    return np.mean(np.abs((y_true[mask] - y_pred[mask]) / y_true[mask])) * 100

mape_day = safe_mape(y_true_day, y_pred_day)

naive_forecast = np.roll(y_true_day, 1)
naive_forecast[0] = y_true_day[0]
mase_day = mae_day / np.mean(np.abs(y_true_day - naive_forecast))

# ---------------------------------------
# Check if it's a holiday (any of 96 points)
# ---------------------------------------
selected_date = y_test.index[start_loc].normalize()
day_start = selected_date
day_end = selected_date + pd.Timedelta(hours=23, minutes=59)

is_holiday = df.loc[day_start:day_end, "is_holiday"].max() == 1

# ---------------------------------------
# Plotting
# ---------------------------------------
plt.figure(figsize=(14, 5))
plt.plot(range(1, 97), y_true_day, label="Actual")
plt.plot(range(1, 97), y_pred_day, label="Predicted")

title = f"âš¡ Electricâ€‘Load Forecast â€¢ {selected_date.date()}"
if is_holiday:
    title += " (Holiday!)"

plt.title(title)
plt.xlabel("Block (15-minute intervals)")
plt.ylabel("Load (MW)")
plt.xticks(np.arange(1, 97, 6))
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

print(f"\nðŸ“… Metrics for {selected_date.date()}:")
print(f"â€¢ MAPE : {mape_day:.2f} %")
print(f"â€¢ MASE : {mase_day:.3f}")
